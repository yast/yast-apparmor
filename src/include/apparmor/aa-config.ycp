/****************************************************************************

Copyright (c) 2002 - 2012 Novell, Inc.
All Rights Reserved.

This program is free software; you can redistribute it and/or
modify it under the terms of version 2 of the GNU General Public License as
published by the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, contact Novell, Inc.

To contact Novell about this file by physical or electronic mail,
you may find current contact information at www.novell.com

****************************************************************************/
{
include "apparmor/config_complain.ycp";
include "apparmor/helps.ycp";
include "apparmor/apparmor_ycp_utils.ycp";
textdomain "yast2-apparmor";

import "Label";
import "Popup";
import "Wizard";

define boolean changeAppArmorState(boolean aaEnabled) {

	any error = nil;
	string aaAction = "";

	if (aaEnabled == true) {
		aaAction = "apparmor:enable";
	} else {
		aaAction = "apparmor:disable";
	}

	error = SCR::Execute(.aaconf, aaAction);

	if ( error != nil && is(error, string) ) {

		string errorMsg = (string) error;
		string popError = _("This operation generated the following error. Check your installation and AppArmor profile settings.");
		Popup::Message( popError+ "\n[" + errorMsg + "]");
		aaEnabled = ! aaEnabled;

	}

	return aaEnabled;
}

define void displayNotifyForm() {

      map settings = (map) SCR::Execute(.apparmor, "aa-notify-settings");

      map<string,any> terse   = settings["terse"]:$[];
      map<string,any> summary = settings["summary"]:$[];
      map<string,any> verbose = settings["verbose"]:$[];

      any t_freq = terse["terse_freq"]:0;
      any s_freq = summary["summary_freq"]:0;
      any v_freq = verbose["verbose_freq"]:0;

      boolean t_unknown = true;
      any a_t_poop = (any) terse["terse_unknown"]:"1";
      string t_poop = tostring(a_t_poop);
      if(t_poop == "0") {
        t_unknown = false;
      }

      boolean s_unknown = true;
      any a_s_poop = terse["summary_unknown"]:"1";
      string s_poop = tostring(a_s_poop);
      if(s_poop == "0") {
        s_unknown = false;
      }

      boolean v_unknown = true;
      any a_v_poop = verbose["verbose_unknown"]:"1";
      string v_poop = tostring(a_v_poop);
      if(v_poop == "0") {
        v_unknown = false;
      }

      list terse_items = [
        `item(`id(0),      _("Disabled"),   t_freq==0?true:false),
        `item(`id(60),     _("1 minute"),   t_freq==60?true:false),
        `item(`id(300),    _("5 minutes"),  t_freq==300?true:false),
        `item(`id(600),    _("10 minutes"), t_freq==600?true:false),
        `item(`id(900),    _("15 minutes"), t_freq==900?true:false),
        `item(`id(1800),   _("30 minutes"), t_freq==1800?true:false),
        `item(`id(3600),   _("1 hour"),     t_freq==3600?true:false),
        `item(`id(86400),  _("1 day"),      t_freq==86400?true:false),
        `item(`id(604800), _("1 week"),     t_freq==604800?true:false)
      ];

      list summary_items = [
        `item(`id(0),      _("Disabled"),   s_freq==0?true:false),
        `item(`id(60),     _("1 minute"),   s_freq==60?true:false),
        `item(`id(300),    _("5 minutes"),  s_freq==300?true:false),
        `item(`id(600),    _("10 minutes"), s_freq==600?true:false),
        `item(`id(900),    _("15 minutes"), s_freq==900?true:false),
        `item(`id(1800),   _("30 minutes"), s_freq==1800?true:false),
        `item(`id(3600),   _("1 hour"),     s_freq==3600?true:false),
        `item(`id(86400),  _("1 day"),      s_freq==86400?true:false),
        `item(`id(604800), _("1 week"),     s_freq==604800?true:false)
      ];

      list verbose_items = [
        `item(`id(0),      _("Disabled"),   v_freq==0?true:false),
        `item(`id(60),     _("1 minute"),   v_freq==60?true:false),
        `item(`id(300),    _("5 minutes"),  v_freq==300?true:false),
        `item(`id(600),    _("10 minutes"), v_freq==600?true:false),
        `item(`id(900),    _("15 minutes"), v_freq==900?true:false),
        `item(`id(1800),   _("30 minutes"), v_freq==1800?true:false),
        `item(`id(3600),   _("1 hour"),     v_freq==3600?true:false),
        `item(`id(86400),  _("1 day"),      v_freq==86400?true:false),
        `item(`id(604800), _("1 week"),     v_freq==604800?true:false)
      ];


      term event_config = `HVCenter(`VBox(`opt(`vstretch),
          `Frame( _("Security Event Notification"),
            `HBox(`HSpacing(1),
            `VBox(`opt(`vstretch),
              `VSpacing(1),
              `Frame( _("Terse Notification"),
                `VBox(`opt(`vstretch),
                  `HBox(
                    `ComboBox(`id(`terse_freq), _("Frequency"), terse_items),
                    `TextEntry(`id(`terse_email), _("Email Address"), terse["terse_email"]:""),
                    `IntField(`id(`terse_level), _("Severity"), 0,10, terse["terse_level"]:0)
                  ),
                  `HBox(
                    `CheckBox( `id(`terse_unknown), _("Include Unknown Severity Events"), t_unknown)
                  )
                )
              ),
              `VSpacing(1),
              `Frame( _("Summary Notification"),
                `VBox(`opt(`vstretch),
                  `HBox(
                    `ComboBox(`id(`summary_freq), _("Frequency"), summary_items),
                    `TextEntry(`id(`summary_email), _("Email Address"), summary["summary_email"]:""),
                    `IntField(`id(`summary_level), _("Severity"), 0,10, summary["summary_level"]:0)
                  ),
                  `HBox(
                    `CheckBox( `id(`summary_unknown), _("Include Unknown Severity Events"), s_unknown)
                  )
                )
              ),
              `VSpacing(1),
              `Frame( _("Verbose Notification"),
                `VBox(`opt(`vstretch),
                  `HBox(
                    `ComboBox(`id(`verbose_freq), _("Frequency"), verbose_items),
                    `TextEntry(`id(`verbose_email), _("Email Address"), verbose["verbose_email"]:""),
                    `IntField(`id(`verbose_level), _("Severity"), 0,10, verbose["verbose_level"]:0)
                  ),
                  `HBox(
                    `CheckBox( `id(`verbose_unknown), _("Include Unknown Severity Events"), v_unknown)
                  )
                )
              ),
              `VSpacing(1)
            ),
            `HSpacing(1)
          )
          )
        )
      );

      Wizard::CreateDialog();
      Wizard::SetContentsButtons(_("Security Event Notification"), event_config, helps["EventNotifyHelpText"]:"", Label::BackButton(), Label::OKButton());
      Wizard::DisableBackButton();

      any ntInput = nil;
      string notifyLabelValue = "";

    while( true ) {
      ntInput = UI::UserInput();

      if (ntInput == `next) {

        map<string,map> answers = $[ ];
        map<string,string> set_notify = $[ ];
        map<string,string> summary = $[ ];
        map<string,string> verbose = $[ ];
        map<string,string> terse = $[ ];

        t_freq = UI::QueryWidget(`id(`terse_freq),   `Value);
        s_freq = UI::QueryWidget(`id(`summary_freq), `Value);
        v_freq = UI::QueryWidget(`id(`verbose_freq), `Value);

        set_notify["aa-set-notify"] = "yes";
        terse["terse_freq"]   = tostring(t_freq);
        summary["summary_freq"] = tostring(s_freq);
        verbose["verbose_freq"] = tostring(v_freq);

        if (t_freq != 0) {

          string t_email = (string) UI::QueryWidget(`id(`terse_email), `Value);

          if ( t_email == nil || t_email == "" )  {
             Popup::Error( _("An email address is required for each selected notification method.") );
             continue;
          } else if ( ! checkEmailAddress( t_email ) ) {
            continue;
          }

          terse["enable_terse"] = "yes";
          terse["terse_email"] = (string) UI::QueryWidget(`id(`terse_email), `Value);
          terse["terse_level"] = (string) tostring(UI::QueryWidget(`id(`terse_level), `Value));

          boolean t_unknown = (boolean) UI::QueryWidget(`id(`terse_unknown), `Value);

          if (t_unknown == true) {
            terse["terse_unknown"] = "1";
          } else {
            terse["terse_unknown"] = "0";
          }

        } else {
          terse["enable_terse"] = "no";
        }

        if (s_freq != 0) {

          string s_email = (string) UI::QueryWidget(`id(`summary_email), `Value);
          if ( s_email == nil || s_email == "" )  {
            Popup::Error( _("An email address is required for each selected notification method.") );
            continue;
          } else if ( ! checkEmailAddress(s_email) ) {
            continue;
          }

          summary["enable_summary"] = "yes";
          summary["summary_email"] = (string) UI::QueryWidget(`id(`summary_email), `Value);
          summary["summary_level"] = (string) tostring(UI::QueryWidget(`id(`summary_level), `Value));

          boolean s_unknown = (boolean) UI::QueryWidget(`id(`summary_unknown), `Value);

          if (s_unknown == true) {
            summary["summary_unknown"] = "1";
          } else {
            summary["summary_unknown"] = "0";
          }

        } else {
          summary["enable_summary"] = "no";
        }

        if (v_freq != 0) {
          string v_email = (string) UI::QueryWidget(`id(`verbose_email), `Value);
          if ( v_email == nil || v_email == "" )  {
            Popup::Error( _("An email address is required for each selected notification method.") );
            continue;
          } else if (! checkEmailAddress(v_email) ) {
            continue;
          }

          verbose["enable_verbose"] = "yes";
          verbose["verbose_email"] = (string) UI::QueryWidget(`id(`verbose_email), `Value);
          verbose["verbose_level"] = (string) tostring(UI::QueryWidget(`id(`verbose_level), `Value));

          boolean v_unknown = (boolean) UI::QueryWidget(`id(`verbose_unknown), `Value);

          if (v_unknown == true) {
            verbose["verbose_unknown"] = "1";
          } else {
            verbose["verbose_unknown"] = "0";
          }
        } else {
          verbose["enable_verbose"] = "no";
        }

        answers["set_notify"] = set_notify;
        answers["terse"] = terse;
        answers["summary"] = summary;
        answers["verbose"] = verbose;

        string result = (string) SCR::Execute(.aaconf, answers);

        if (result != "success") {
          Popup::Error( _("Configuration failed for the following operations: ") + result);
        }

        if ( t_freq != 0 || s_freq != 0 || v_freq != 0 ) {
          notifyLabelValue = _("Notification is enabled");
        } else {
          notifyLabelValue = _("Notification is disabled");
        }
      }

      Wizard::CloseDialog();
      if ( (ntInput == `ok) || (ntInput == `next) ) {
        UI::ChangeWidget( `id(`notifyLabel), `Value, notifyLabelValue );
      }
        break;
    }

}

define symbol displayAppArmorConfig () {

  // AppArmor Status
  boolean aaEnabled = false;
  boolean ntIsEnabled = false;
  string apparmor = (string) SCR::Execute(.apparmor, "aa-status");
  string aaEnStr = _("AppArmor is disabled");

  if (apparmor == "enabled") {
    aaEnabled = true;
	aaEnStr = _("AppArmor is enabled");
  }

  // Notification Status
  string evnotify = (string) SCR::Execute(.apparmor, "aa-notify");
  string evEnStr = _("Notification is disabled");
  if (evnotify == "enabled") {
    ntIsEnabled = true;
	evEnStr = _("Notification is enabled");
  } else if (evnotify == "notinstalled") {
    evnotify = "disabled";
  }

  /* Network dialog caption */
  string caption = _("AppArmor Configuration");
  string help = _("<p><b>AppArmor Status</b><br>This reports whether the AppArmor policy enforcement 
module is loaded and functioning.</p>") + 

_("<p><b>Security Event Notification</b><br>Configure this tool if you want 
to be notified by email when access violations have occurred.</p>") + 

_("<p><b>Profile Modes</b><br>Use this tool to change the way that AppArmor 
uses individual profiles.</p>");

  term contents =
  `HVCenter(
    `VBox(
    `VSpacing(1), `HSpacing(2),
        `HBox (
	        `HSpacing( `opt(`hstretch), 2 ),
	        `VBox(
	            `Left(`CheckBox( `id(`aaState), `opt(`notify), _("&Enable AppArmor"), aaEnabled)),
		        `VSpacing(1),

				`Frame( `id(`aaEnableFrame), _("Configure AppArmor"),
			        `HBox (
				        `HSpacing( `opt(`hstretch), 4 ),
						`VBox(
					        `VSpacing(1),
// event notification disabled due to changes in AppArmor
/*					        `Frame ( _("Security Event Notification"),
					            `HBox(
						            `VSpacing(1), `HSpacing(1),
						            `HVCenter( `Label( `id(`notifyLabel),  evEnStr )),
						            `PushButton( `id(`ntconf), _("C&onfigure")),
						            `VSpacing(1), `HSpacing(1)
					            )
					        ),
					        `VSpacing(1), `HSpacing(20),
*/
					        `Frame ( _("Configure Profile Modes"),
					          `HBox(
					            `VSpacing(1), `HSpacing(1),
					            `Left(`HVCenter( `Label( `id(`modesLabel), " " +  _("Set profile modes") ))),
					            `PushButton( `id(`modeconf), _("Co&nfigure") ),
					            `VSpacing(1), `HSpacing(1)
					          )
							),
					        `VSpacing(1)
						),
				        `HSpacing( `opt(`hstretch), 4 )
					))),
		      `HSpacing( `opt(`hstretch), 2 )
        ))
  );

	// May want to replace Wizard() with UI()
	Wizard::CreateDialog();
	Wizard::SetTitleIcon("apparmor/control_panel");
	Wizard::SetContentsButtons(caption, contents, help, Label::BackButton(), _("&Done"));
	Wizard::DisableBackButton();

	UI::ChangeWidget(`id(`aaEnableFrame), `Enabled, aaEnabled);

	while( true ) {

		symbol ret = (symbol) UI::UserInput();

		if ( ret == `abort || ret == `cancel || ret == `next) {
            break;
        } else if (ret == `aaState ) {

			// Set AppArmor state: enabled|disabled
			boolean requestedAaState = (boolean) UI::QueryWidget(`id(`aaState), `Value);

			aaEnabled = changeAppArmorState(requestedAaState);

			// These will match if the update was successful
			if ( aaEnabled == requestedAaState ) {
				UI::ChangeWidget(`id(`aaEnableFrame), `Enabled, aaEnabled);
			}

		} else if (ret == `ntconf ) {
			displayNotifyForm();

		} else if (ret == `modeconf ) {

			 profileModeConfigForm();

			//displayAppArmorConfig();

		} else {
			y2error("Unexpected return code: " + tostring(ret));
		}
  }

  UI::CloseDialog();
  return nil;
}

/* EOF */
}
